{"version":3,"sources":["img/search.svg","img/dot.svg","img/avatar.png","components/WhatsLab/WhatsLab.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AllDivs","styled","div","PageHeader","UserPhoto","img","InputName","input","ImgSearch","ImgOptions","PageMain","MessageBox","PageFooter","InputMessage","SendButton","button","WhatsLab","state","messages","userName","message","addMessage","newMessage","newMessages","setState","changeUserName","event","target","value","changeMessage","clickEnter","keyCode","messagesList","this","map","msg","src","imgAvatar","alt","placeholder","onChange","iconSearch","iconOptions","onKeyDown","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,w3FCM3C,IAAMC,EAAUC,IAAOC,IAAV,KAUPC,EAAaF,IAAOC,IAAV,KAWVE,EAAYH,IAAOI,IAAV,KAOTC,EAAYL,IAAOM,MAAV,KAWTC,EAAYP,IAAOI,IAAV,KAOTI,EAAaR,IAAOI,IAAV,KASVK,EAAWT,IAAOC,IAAV,KAURS,EAAaV,IAAOC,IAAV,KAOVU,EAAaX,IAAOC,IAAV,KAWVW,EAAeZ,IAAOM,MAAV,KAUZO,EAAab,IAAOc,OAAV,KAyFDC,E,4MA1EXC,MAAQ,CACJC,SAAU,GACVC,SAAU,GACVC,QAAS,I,EAGbC,WAAa,WACT,IAAMC,EAAa,CACfH,SAAU,EAAKF,MAAME,SACrBC,QAAS,EAAKH,MAAMG,SAGlBG,EAAW,sBAAO,EAAKN,MAAMC,UAAlB,CAA4BI,IAE7C,EAAKE,SAAS,CAAEN,SAAUK,K,EAI9BE,eAAiB,SAACC,GACd,EAAKF,SAAS,CAACL,SAAUO,EAAMC,OAAOC,S,EAG1CC,cAAgB,SAACH,GACb,EAAKF,SAAS,CAACJ,QAASM,EAAMC,OAAOC,S,EAGzCE,WAAa,SAACJ,GACY,KAAlBA,EAAMK,SACN,EAAKV,c,uDAMT,IAAMW,EAAeC,KAAKhB,MAAMC,SAASgB,KAAI,SAACC,GAC1C,OACI,2BACKA,EAAIhB,SADT,KACqBgB,EAAIf,YAKjC,OAAO,kBAACpB,EAAD,KACH,kBAACG,EAAD,KACI,kBAACC,EAAD,CAAWgC,IAAKC,IAAWC,IAAI,iBAC/B,kBAAChC,EAAD,CACAiC,YAAa,sBACbX,MAAOK,KAAKhB,MAAME,SAClBqB,SAAUP,KAAKR,iBAEf,kBAACjB,EAAD,CAAW4B,IAAKK,IAAYH,IAAI,gBAChC,kBAAC7B,EAAD,CAAY2B,IAAKM,IAAaJ,IAAI,kBAEtC,kBAAC5B,EAAD,KACG,2BACI,kBAACC,EAAD,KACKqB,KAIZ,kBAACpB,EAAD,KACI,kBAACC,EAAD,CACA0B,YAAa,uBACbX,MAAOK,KAAKhB,MAAMG,QAClBoB,SAAUP,KAAKJ,cACfc,UAAWV,KAAKH,aAGhB,kBAAChB,EAAD,CAAY8B,QAASX,KAAKZ,YAA1B,gB,GAtEOwB,IAAMC,WCjGdC,MAVf,WACE,OACE,yBAAKC,UAAW,iBACd,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9C,c","file":"static/js/main.d5346481.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.1cb7545f.svg\";","module.exports = __webpack_public_path__ + \"static/media/dot.3be45fa3.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.3ff5d735.png\";","import React from 'react'\r\nimport iconSearch from '../../img/search.svg'\r\nimport iconOptions from '../../img/dot.svg'\r\nimport styled from 'styled-components'\r\nimport imgAvatar from '../../img/avatar.png'\r\n\r\nconst AllDivs = styled.div`\r\n    height: 100vh;\r\n    width: 100vw;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background: linear-gradient(180deg, #009688 20%, #dddbd1 0%);\r\n`\r\n\r\nconst PageHeader = styled.div`\r\n    width: 60%;\r\n    height: 15vh;\r\n    margin-top: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: orange;\r\n    border: 1px solid grey;\r\n    border-radius: 8px;\r\n    position: relative;\r\n`\r\nconst UserPhoto = styled.img`\r\n    border-radius: 50%;\r\n    border: 1px solid #666;\r\n    width: auto;\r\n    height: 70%;\r\n    margin-left: 25px;\r\n`\r\nconst InputName = styled.input`\r\n    border-radius: 10%;\r\n    border-style: none;\r\n    width: 300px;\r\n    height: 20%;\r\n    background-color: orange;\r\n    margin-left: 25px;\r\n    color: white;\r\n    font-size: 20px;\r\n\r\n`\r\nconst ImgSearch = styled.img`\r\n    display: flex;\r\n    right: 65px;\r\n    position: absolute;\r\n    width: auto;\r\n    height: 25%;\r\n`\r\nconst ImgOptions = styled.img`\r\n    display: flex;\r\n    right: 25px;\r\n    position: absolute;\r\n    margin-left: 20px;\r\n    width: auto;\r\n    height: 25%;\r\n`\r\n\r\nconst PageMain = styled.div`\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n    width: 60%;\r\n    height: 70vh;\r\n    border: 1px solid grey;\r\n    background-image: url(https://www.papeiseparede.com.br/3257-thickbox_default/papel-de-parede-whatsapp-branco-e-azul.jpg);\r\n    border-radius: 8px;\r\n`\r\n\r\nconst MessageBox = styled.div`\r\n    margin-left: 25px;\r\n    margin-right: 25px;\r\n    border-radius: 10px;\r\n    font-size: 25px;\r\n`\r\n\r\nconst PageFooter = styled.div`\r\n    width: 60%;    \r\n    height: 15vh;\r\n    margin-bottom: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: #009688;\r\n    border: 1px solid grey;\r\n    border-radius: 8px;\r\n`\r\n\r\nconst InputMessage = styled.input`\r\n    border: 1px solid whitesmoke;\r\n    width: 80%;\r\n    height: 80%;\r\n    background-color: #009688;\r\n    margin-left: 25px;\r\n    color: white;\r\n    font-size: 20px;\r\n    border-radius: 8px;\r\n`\r\nconst SendButton = styled.button`\r\n    width: 150px;\r\n    height: 50px;\r\n    background-color: grey;\r\n    margin-left: 25px;\r\n    color: white;\r\n    font-size: 20px;\r\n    border: 1px solid #666;\r\n    border-radius: 8px;\r\n`\r\n\r\n\r\n\r\nclass WhatsLab extends React.Component {\r\n    \r\n    state = {\r\n        messages: [],\r\n        userName: \"\",\r\n        message: \"\"\r\n    }\r\n\r\n    addMessage = () => {\r\n        const newMessage = {\r\n            userName: this.state.userName,\r\n            message: this.state.message\r\n        }\r\n\r\n        const newMessages = [...this.state.messages, newMessage]\r\n\r\n        this.setState({ messages: newMessages})\r\n    }\r\n\r\n    \r\n    changeUserName = (event) => {\r\n        this.setState({userName: event.target.value});\r\n    }\r\n\r\n    changeMessage = (event) => {\r\n        this.setState({message: event.target.value});\r\n    }\r\n\r\n    clickEnter = (event) => {\r\n        if (event.keyCode === 13) {\r\n            this.addMessage()\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        \r\n        const messagesList = this.state.messages.map((msg) => {\r\n            return (\r\n                <p>\r\n                    {msg.userName}: {msg.message}\r\n                </p>\r\n            )\r\n            })\r\n        \r\n        return <AllDivs>\r\n            <PageHeader>\r\n                <UserPhoto src={imgAvatar} alt='User Picture'/>\r\n                <InputName\r\n                placeholder={\"Digite o usuÃ¡rio\"}\r\n                value={this.state.userName}\r\n                onChange={this.changeUserName}\r\n                />\r\n                <ImgSearch src={iconSearch} alt='Icon Search'/>\r\n                <ImgOptions src={iconOptions} alt='Icon Options'/>\r\n            </PageHeader> \r\n            <PageMain>\r\n               <p>\r\n                   <MessageBox>\r\n                       {messagesList}                      \r\n                   </MessageBox>\r\n               </p>\r\n            </PageMain>\r\n            <PageFooter>\r\n                <InputMessage \r\n                placeholder={'Escreva sua mensagem'}\r\n                value={this.state.message}\r\n                onChange={this.changeMessage}\r\n                onKeyDown={this.clickEnter}\r\n                />\r\n\r\n                <SendButton onClick={this.addMessage}>ENVIAR</SendButton>\r\n            </PageFooter>\r\n        </AllDivs>\r\n    }\r\n}\r\n\r\nexport default WhatsLab","import React from 'react';\r\nimport './App.css';\r\nimport WhatsLab from './components/WhatsLab/WhatsLab';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={\"app-container\"}>\r\n      <WhatsLab\r\n      \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}